#+TITLE: 版本控制
#+AUTHOR: 李阳
#+DATE: 2020.08.20
#+EMAIL: 7325560@qq.com

#+REVEAL_THEME: moon
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: ^:nil
#+OPTIONS: reveal_single_file:t
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_EXTRA_CSS: ./data/custom.css

* 什么是版本控制
- 记录目录下所有文件的变化
- 添加、删除、修改

* 版本控制工具
- Subversion, SVN
- Git

* 为什么使用版本控制工具
- 保留历史
- 协调多人工作

* 工作区 <-> 仓库

* 仓库
- 存在于服务器
- 地址 /git@192.168.2.120:ink-sanguo-dev/
- 版本控制工具保存 *所有* 数据的地方

* 工作区
- 存在于本地机器
- 工作区只是仓库的一个状态
- .svn .git

* 提交
- 修改工作区的文件需要告诉版本控制工具
- 修改包括添加新文件，修改已有文件，删除文件
- 改名 = 删除文件 + 添加新文件
- 每次提交可能包含多个修改

* 历史记录
- 查看历史提交
- 谁在哪个时间做的提交，其中做了哪些修改

* ?

* 不能提交？
- 提交时要求工作区是最新的

* 多人协作
- 大家都有可能在任何时间向仓库提交任何改动
- 提交时，需要先把工作区更新为仓库最新的状态

* 冲突
- 本地修改的文件，别人已经修改过
- 冲突会在更新后发生
- 找到修改文件的人，讨论如何合并这个文件
- 冲突解决后再次提交

* 纯文本 vs 二进制
- 纯文本可以直接打开阅读的文件
- 纯文本，版本控制工具以行为单位检查冲突
- 二进制，只能以文件为单位检查冲突

* ?

* 关于 SVN
- 初始化工作区 checkout
- 更新 update
- 提交 commit

* SVN 的集中式架构
- 集中式，本地工作区和服务器仓库是不同的
- update 仓库 -> 工作区
- commit 工作区 -> 仓库

* 关于 Git
- 初始化工作取 clone
- 拉取 pull
- 推送 push
- 提交 commit

* Git 的分布式架构
- 分布式，本地工作区和服务器仓库是相同的
- pull 和 push 是在工作区和仓库之间同步数据
- pull 仓库 -> 工作区
- push 工作区 -> 仓库
- commit 提交在本地工作区的操作

* ?

* pull 做了什么
- fetch 同步仓库的改动
- merge 合并本地的分支与对应的远程分支

* 合并提交
- 一般的提交只有一个父提交，合并分支时产生的提交有两个父提交
- 合并的方向，把 B 合并入 A，对 A 来说 B 是 theirs，A 是 ours
- *包含两个父提交所在分支头到分支相同起始点的所有改动*

* 合并冲突
- 合并时发现不同分支上的提交修改了同样的文件
- 工作区是未完成的合并提交的状态
- 工作区看到的改动是 *别人(theirs)* 的改动
- 工作区中冲突的文件，说明这个文件自己(ours)也修改了
- 不要动工作区中没有冲突但是显示修改的文件，说明这个文件是别人改的但自己没有改过

* 谢谢
